import numpy as np
import pandas as pd
import yfinance as yf
from scipy.optimize import minimize

class PortfolioOptimizationAgent:
    def optimize(self, portfolio):
        if not portfolio:
            return "D√©sol√©, je n'ai pas trouv√© de portefeuille √† analyser. Pouvez-vous v√©rifier et me fournir les d√©tails de votre portefeuille ?"

        tickers = [stock['symbol'] for stock in portfolio]
        weights = [float(stock['weight']) / 100 for stock in portfolio]
        
        data = yf.download(tickers, period="5y")['Adj Close']
        returns = data.pct_change().dropna()

        def portfolio_performance(weights, mean_returns, cov_matrix):
            returns = np.sum(mean_returns * weights) * 252
            std = np.sqrt(np.dot(weights, np.dot(cov_matrix, weights))) * np.sqrt(252)
            return std, returns

        def neg_sharpe_ratio(weights, mean_returns, cov_matrix, risk_free_rate):
            p_std, p_ret = portfolio_performance(weights, mean_returns, cov_matrix)
            return -(p_ret - risk_free_rate) / p_std

        def optimize_portfolio(mean_returns, cov_matrix, risk_free_rate):
            num_assets = len(mean_returns)
            args = (mean_returns, cov_matrix, risk_free_rate)
            constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
            bound = (0.0, 1.0)
            bounds = tuple(bound for asset in range(num_assets))
            result = minimize(neg_sharpe_ratio, num_assets*[1./num_assets,], args=args,
                              method='SLSQP', bounds=bounds, constraints=constraints)
            return result

        mean_returns = returns.mean()
        cov_matrix = returns.cov()
        risk_free_rate = 0.03

        opt = optimize_portfolio(mean_returns, cov_matrix, risk_free_rate)
        current_std, current_ret = portfolio_performance(weights, mean_returns, cov_matrix)
        current_sharpe = (current_ret - risk_free_rate) / current_std
        opt_std, opt_ret = portfolio_performance(opt.x, mean_returns, cov_matrix)
        opt_sharpe = (opt_ret - risk_free_rate) / opt_std

        current_weights = {ticker: f"{weight:.2%}" for ticker, weight in zip(tickers, weights)}
        optimized_weights = {ticker: f"{weight:.2%}" for ticker, weight in zip(tickers, opt.x)}

        rapport = f"""Bonjour ! J'ai analys√© votre portefeuille et j'ai quelques recommandations int√©ressantes √† vous partager. Voici un r√©sum√© de mon analyse :

üìä Votre portefeuille actuel :
{self._format_portfolio(current_weights)}

Avec cette r√©partition, voici vos indicateurs actuels :
üìà Rendement attendu : {current_ret:.2%}
üìâ Volatilit√© : {current_std:.2%}
üíπ Ratio de Sharpe : {current_sharpe:.2f}

Apr√®s optimisation, voici ce que je sugg√®re :

üîÑ Portefeuille optimis√© :
{self._format_portfolio(optimized_weights)}

Cette nouvelle r√©partition pourrait vous offrir :
üìà Rendement attendu : {opt_ret:.2%} ({opt_ret - current_ret:+.2%})
üìâ Volatilit√© : {opt_std:.2%} ({opt_std - current_std:+.2%})
üíπ Ratio de Sharpe : {opt_sharpe:.2f} ({opt_sharpe - current_sharpe:+.2f})

üí° Ce que cela signifie pour vous :
1. Le rendement attendu est {'am√©lior√©' if opt_ret > current_ret else 'r√©duit'}, passant de {current_ret:.2%} √† {opt_ret:.2%}.
2. La volatilit√© {'augmente' if opt_std > current_std else 'diminue'}, ce qui implique {'plus' if opt_std > current_std else 'moins'} de risque, mais aussi {'plus' if opt_std > current_std else 'moins'} de potentiel de gain.
3. Le ratio de Sharpe {'s\'am√©liore' if opt_sharpe > current_sharpe else 'se d√©grade'}, indiquant un {'meilleur' if opt_sharpe > current_sharpe else 'moins bon'} √©quilibre rendement/risque.

üîë Points cl√©s √† consid√©rer :
{self._generate_key_points(current_weights, optimized_weights)}

N'oubliez pas que cette analyse est bas√©e sur des donn√©es historiques et des mod√®les math√©matiques. Elle ne garantit pas les performances futures. Il est toujours recommand√© de diversifier et d'ajuster votre strat√©gie en fonction de votre situation personnelle et de vos objectifs √† long terme.

Que pensez-vous de ces suggestions ? Souhaitez-vous que nous discutions plus en d√©tail de certains aspects sp√©cifiques de cette analyse ?"""

        return rapport

    def _format_portfolio(self, weights):
        return "\n".join([f"- {ticker}: {weight}" for ticker, weight in weights.items()])

    def _generate_key_points(self, current, optimized):
        points = []
        for ticker in current.keys():
            current_weight = float(current[ticker].strip('%')) / 100
            optimized_weight = float(optimized[ticker].strip('%')) / 100
            diff = optimized_weight - current_weight
            if abs(diff) > 0.05:  # Seuil arbitraire pour les changements significatifs
                if diff > 0:
                    points.append(f"- L'optimisation sugg√®re d'augmenter significativement la part de {ticker} (de {current[ticker]} √† {optimized[ticker]}).")
                else:
                    points.append(f"- L'optimisation sugg√®re de r√©duire significativement la part de {ticker} (de {current[ticker]} √† {optimized[ticker]}).")
        
        if not points:
            points.append("- Les changements sugg√©r√©s sont relativement mineurs pour tous les titres.")
        
        return "\n".join(points)

portfolio_optimization_agent = PortfolioOptimizationAgent()
